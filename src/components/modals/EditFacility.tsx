import type { Facility } from '@/types';
import {
	Box,
	Button,
	Group,
	TextInput,
	NumberInput,
	Divider,
	Text,
} from '@mantine/core';
import { ContextModalProps, modals } from '@mantine/modals';
import { useState } from 'react';
import { IconDeviceFloppy, IconRuler, IconTrash } from '@tabler/icons-react';
import { $appState } from '@/stores/app';
import { useStore } from '@nanostores/react';

const EditFacility = ({
	context,
	innerProps,
}: ContextModalProps<{ facility: Facility }>) => {
	const { facilities } = useStore($appState);
	const [nameField, setNameField] = useState(
		innerProps.facility ? innerProps.facility.name : '',
	);
	const [streetAddressField, setStreetAddressField] = useState(
		innerProps.facility ? innerProps.facility.streetAddress : '',
	);
	const [cityField, setCityField] = useState(
		innerProps.facility ? innerProps.facility.city : '',
	);
	const [stateField, setStateField] = useState(
		innerProps.facility ? innerProps.facility.state : '',
	);
	const [zipField, setZipField] = useState(
		innerProps.facility ? innerProps.facility.zip : '',
	);
	const [eGridField, setEGridField] = useState(
		innerProps.facility ? innerProps.facility.eGrid : '',
	);
	const [squareFootageField, setSquareFootageField] = useState<
		number | undefined
	>(innerProps.facility ? innerProps.facility.squareFootage : undefined);
	const openDeleteModal = () =>
		modals.openConfirmModal({
			title: 'Delete this entry',
			radius: 'md',
			children: (
				<Text size="sm" p="lg">
					Are you sure you want to delete this entry? This action is
					destructive and may affect other parts of the workbook.
				</Text>
			),
			labels: { confirm: 'Delete', cancel: "Don't delete it" },
			confirmProps: { color: 'red' },
			onConfirm: () => handleDelete(),
		});

	const handleDelete = () => {
		//TODO: remove by ID once we have those
		const newFacilities = facilities.filter(
			(facility) => facility.name !== innerProps.facility?.name,
		);
		$appState.setKey('facilities', newFacilities);
		context.closeAll();
	};

	const handleSave = () => {
		//TODO: allow for editing vs creating new one
		const newEntry: Facility = {
			name: nameField,
			streetAddress: streetAddressField,
			city: cityField,
			state: stateField,
			zip: zipField,
			eGrid: eGridField,
			squareFootage: squareFootageField ?? 0,
		};
		$appState.setKey('facilities', [...facilities, newEntry]);
		context.closeAll();
	};
	return (
		<Box p="md">
			<TextInput
				label="Name"
				placeholder="Facility Name"
				radius="md"
				value={nameField}
				onChange={(e) => setNameField(e.target.value)}
				required
				mb="sm"
			/>
			<Divider my="sm" />
			<TextInput
				label="Street Address"
				placeholder="1234 Main St"
				radius="md"
				value={streetAddressField}
				onChange={(e) => setStreetAddressField(e.target.value)}
				mb="sm"
			/>
			<TextInput
				label="City"
				placeholder="City"
				radius="md"
				value={cityField}
				onChange={(e) => setCityField(e.target.value)}
				mb="sm"
			/>
			<Group grow wrap="nowrap">
				<TextInput
					label="State"
					placeholder="State"
					radius="md"
					value={stateField}
					onChange={(e) => setStateField(e.target.value)}
					required
					mb="sm"
				/>
				<TextInput
					label="ZIP"
					placeholder="12345"
					radius="md"
					value={zipField}
					onChange={(e) => setZipField(e.target.value)}
					required
					mb="sm"
				/>
			</Group>
			<Divider my="sm" />
			<TextInput
				label="eGRID Subregion"
				disabled
				description="This is automatically generated by the system"
				radius="md"
				value={eGridField}
				onChange={(e) => setEGridField(e.target.value)}
				mb="sm"
			/>
			<NumberInput
				label="Square Footage"
				placeholder="10000"
				radius="md"
				value={squareFootageField}
				onChange={(value) => setSquareFootageField(Number(value))}
				allowNegative={false}
				required
				mb="sm"
				thousandSeparator=","
				decimalScale={2}
				suffix=" sqft"
				step={100}
				leftSection={<IconRuler />}
			/>
			<Group justify="flex-end" mt="md">
				<Button
					color="red"
					leftSection={<IconTrash />}
					radius="md"
					onClick={openDeleteModal}
				>
					Delete
				</Button>
				<Button
					color="blue"
					radius="md"
					leftSection={<IconDeviceFloppy />}
					onClick={handleSave}
				>
					Save
				</Button>
			</Group>
		</Box>
	);
};

export default EditFacility;
